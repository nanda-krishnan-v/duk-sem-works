# -*- coding: utf-8 -*-
"""Cryptography.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FtAAGZ4OnnsJfJVEYcRfVfF5471topP_

# **Number Theory Functions Implementation in Python**

# Task - 1
"""

number = int(input("Enter a number: "))
''' Inputing the number that have to be checked from the user.
Creating a function to check whether the number is prime or not.
'''
def primeNumber(number):
    #Assigning the flag as true because initially we are assuming that the number is prime.
    flag = True

    #if the number is less than 2 then it is not a prime number so return false.
    if number < 2:
        return False

    '''Using for loop to check the number is prime or not.
    If the number is divisible by any number then it is not a prime number so return false.
    If the number is not divisible by any number then it is a prime number so return true.'''

    for i in range(2,number//2):
        if number % i == 0:
            return False
    if flag:
        return True

print(primeNumber(number))

"""# Task - 2"""

n = int(input("Enter the number: "))

def noOfprimeFactors(n):
    # Initializing count to store the number of prime factors
    count = 0
    i = 2  # Smallest prime number

    ''' Using a while loop to check divisibility.
        If 'n' is divisible by 'i', we count it and keep dividing 'n' by 'i'
        until it is no longer divisible.
    '''
    while i * i <= n:
        while n % i == 0:
            count += 1
            n //= i  # Reducing 'n' by dividing it by 'i'
        i += 1

    # If there's any prime factor left greater than sqrt(n), count it
    if n > 1:
        count += 1

    return count  # Returning the total count of prime factors

result = noOfprimeFactors(n)
print(f"The number of prime factors of {n} is {result}.")

"""# Task - 3"""

# Function to calculate GCD (Greatest Common Divisor) using the Euclidean algorithm
def gcd(a, b):

    c = 0  # Initialize remainder variable

    while b != 0:  # Continue until remainder becomes zero
        c = a % b  # Compute remainder of a divided by b
        a = b
        b = c  # Assign remainder to b

    return a  # Return the last non-zero value as the GCD


a = int(input("Enter first number : "))
b = int(input("Enter second number : "))

# Calling the function and printing the result
print(f"The GCD of {a} and {b} is {gcd(a, b)}.")

"""# Task - 4"""

# Function to calculate GCD (Greatest Common Divisor)
#finding the GCD
def gcd(a, b):
    while b != 0:
        c = a
        a = b
        b = c % b
    return a

def lcm(a, b):
    """
    LCM(a, b) = (a * b) // GCD(a, b)
    """
    return (a * b) // gcd(a, b)  # Compute LCM using GCD


a = int(input("Enter first number : "))
b = int(input("Enter second number : "))

# Calling the function and printing the result
print(f"The LCM of {a} and {b} is {lcm(a, b)}.")